require "rubygems"
require "mysql"
require "r2rset"
require 'ruby-debug'
class ConnectionInfo
  attr_accessor :host
  attr_accessor :user
  attr_accessor :password
  attr_accessor :dbname

  def initialize(host, user, password, dbname)
    @host = host
    @user = user
    @password = password
    @dbname = dbname
  end
end

class BugzillaToRedmine
  def initialize
    @source = ConnectionInfo.new(S_HOST, S_USER, S_PASSWORD, S_DB)
    @dest = ConnectionInfo.new(D_HOST, D_USER, D_PASSWORD, D_DB)
  end
 
def open_connections
    @sdb = self.open_connection(@source)
    @ddb = self.open_connection(@dest)
  end

  def log(s)
    puts s
  end

  def close_connections
    self.log "closing database connections"
    @bugzilladb.close
    @redminedb.close
  end
  
def move_trackers
s_sql="select * from trackers"

i_sql= "INSERT into trackers (name,is_in_chlog,position,is_in_roadmap) VALUES (?,?,?,?)"
red_select_sql(s_sql){|row| red_exec_sql(i_sql,row[1],row[2],row[3],row[4])}
end

def move_status
s_sql="select * from issue_statuses"
i_sql= "INSERT into issue_statuses (name,is_closed,is_default,position,default_done_ratio) VALUES (?,?,?,?,?)"
red_select_sql(s_sql){|row| red_exec_sql(i_sql,row[1],row[2],row[3],row[4],row[5])}

end

def move_issues
t={1=>12,3=>13,5=>14,6=>15,7=>16,8=>17} ##Tracker Id mapping
s={1=>13,2=>14,3=>15,4=>16,5=>17,6=>18} ##Status ID mapping
u = {3=>6,6=>28,14=>27} ##User Ip mapping
s_sql="select * from issues where project_id=2"

i_sql= "INSERT into issues (tracker_id,project_id,subject,description,due_date,category_id,status_id,assigned_to_id,priority_id,fixed_version_id,author_id,lock_version,created_on,updated_on,start_date,done_ratio,estimated_hours,parent_id,lft,rgt,is_private) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"

red_select_sql(s_sql){|row| red_exec_sql(i_sql,t[row[1]],10,row[3],row[4],row[5],row[6],s[row[7]],u[row[8]],row[9],row[10],row[11],row[12],row[13],row[14],row[15],row[16],row[17],row[18],1,2,row[21])}
end

def move_jour
h={1113=>562, 196=>310, 327=>388, 131=>255, 262=>356, 786=>465, 1114=>563, 66=>191, 197=>311, 328=>389, 132=>256, 263=>357, 787=>466, 1115=>564, 198=>312, 460=>410, 67=>192, 133=>257, 264=>358, 788=>467, 1116=>565, 199=>313, 330=>390, 461=>411, 68=>193, 265=>359, 789=>468, 134=>258, 1117=>566, 200=>314, 331=>391, 462=>412, 986=>500, 69=>194, 266=>360, 659=>417, 790=>469, 135=>259, 1118=>567, 332=>392, 463=>413, 987=>501, 70=>195, 201=>315, 267=>361, 791=>470, 136=>260, 1119=>568, 464=>414, 988=>502, 71=>196, 202=>316, 792=>471, 137=>261, 268=>362, 1120=>569, 465=>415, 72=>197, 203=>317, 793=>472, 7=>140, 138=>262, 269=>363, 1121=>570, 466=>416, 73=>198, 204=>318, 794=>473, 8=>141, 139=>263, 270=>364, 1122=>571, 729=>418, 74=>199, 205=>319, 336=>393, 795=>474, 9=>142, 140=>264, 271=>365, 1123=>572, 730=>419, 75=>200, 206=>320, 337=>394, 796=>475, 1058=>510, 10=>143, 141=>265, 272=>366, 1124=>573, 731=>420, 76=>201, 207=>321, 797=>476, 11=>144, 142=>266, 273=>367, 1125=>574, 732=>421, 77=>202, 208=>322, 798=>477, 1060=>511, 12=>145, 143=>267, 1126=>575, 864=>485, 78=>203, 209=>323, 799=>478, 1061=>512, 13=>146, 144=>268, 275=>368, 1127=>576, 734=>422, 865=>486, 79=>204, 210=>324, 1062=>513, 14=>147, 145=>269, 276=>369, 1128=>577, 735=>423, 80=>205, 211=>325, 1063=>514, 15=>148, 146=>270, 277=>370, 1129=>578, 736=>424, 81=>206, 212=>326, 1064=>515, 16=>149, 147=>271, 278=>371, 1130=>579, 82=>207, 213=>327, 737=>425, 1065=>516, 17=>150, 148=>272, 83=>208, 214=>328, 738=>426, 1066=>517, 18=>151, 149=>273, 804=>479, 1001=>503, 84=>209, 215=>329, 739=>427, 936=>493, 19=>152, 150=>274, 805=>480, 85=>210, 216=>330, 740=>428, 1068=>518, 20=>153, 151=>275, 806=>481, 86=>211, 217=>331, 741=>429, 1069=>519, 21=>154, 152=>276, 87=>212, 218=>332, 742=>430, 1070=>520, 22=>155, 153=>277, 88=>213, 219=>333, 743=>431, 1005=>504, 1071=>521, 23=>156, 154=>278, 89=>214, 220=>334, 744=>432, 1006=>505, 24=>157, 155=>279, 1072=>522, 90=>215, 221=>335, 745=>433, 25=>158, 156=>280, 1073=>523, 222=>336, 746=>434, 26=>159, 157=>281, 1074=>524, 92=>216, 223=>337, 27=>160, 158=>282, 1075=>525, 93=>217, 748=>435, 28=>161, 159=>283, 1076=>526, 94=>218, 356=>395, 749=>436, 29=>162, 160=>284, 1077=>527, 95=>219, 750=>437, 30=>163, 161=>285, 1078=>528, 96=>220, 358=>396, 751=>438, 882=>487, 31=>164, 162=>286, 1079=>529, 97=>221, 359=>397, 883=>488, 32=>165, 163=>287, 1080=>530, 98=>222, 360=>398, 753=>439, 884=>489, 164=>288, 1081=>531, 33=>166, 99=>223, 361=>399, 754=>440, 165=>289, 34=>167, 755=>441, 100=>224, 166=>290, 1083=>532, 35=>168, 756=>442, 101=>225, 1084=>533, 36=>169, 167=>291, 364=>400, 757=>443, 102=>226, 1085=>534, 37=>170, 168=>292, 365=>401, 758=>444, 103=>227, 1086=>535, 38=>171, 169=>293, 366=>402, 759=>445, 104=>228, 1087=>536, 39=>172, 170=>294, 301=>372, 760=>446, 105=>229, 1088=>537, 40=>173, 302=>373, 761=>447, 106=>230, 368=>403, 827=>482, 1089=>538, 41=>174, 172=>295, 303=>374, 762=>448, 107=>231, 369=>404, 1090=>539, 42=>175, 173=>296, 1025=>506, 108=>232, 370=>405, 1091=>540, 109=>233, 1092=>541, 765=>449, 110=>234, 241=>338, 1093=>542, 766=>450, 1028=>507, 111=>235, 242=>339, 1094=>543, 767=>451, 1029=>508, 112=>236, 243=>340, 1095=>544, 768=>452, 113=>237, 244=>341, 1096=>545, 769=>453, 1031=>509, 114=>238, 245=>342, 376=>406, 1097=>546, 835=>483, 901=>490, 115=>239, 246=>343, 770=>454, 1098=>547, 50=>176, 116=>240, 247=>344, 378=>407, 771=>455, 1099=>548, 51=>177, 313=>375, 903=>491, 117=>241, 248=>345, 1100=>549, 52=>178, 183=>297, 118=>242, 249=>346, 773=>456, 904=>492, 1101=>550, 53=>179, 184=>298, 315=>376, 119=>243, 250=>347, 774=>457, 1102=>551, 54=>180, 185=>299, 316=>377, 971=>494, 120=>244, 251=>348, 775=>458, 1103=>552, 55=>181, 186=>300, 317=>378, 972=>495, 121=>245, 252=>349, 776=>459, 1104=>553, 56=>182, 187=>301, 318=>379, 973=>496, 122=>246, 384=>408, 1105=>554, 57=>183, 188=>302, 319=>380, 974=>497, 123=>247, 385=>409, 1106=>555, 58=>184, 189=>303, 320=>381, 975=>498, 124=>248, 1107=>556, 59=>185, 190=>304, 321=>382, 976=>499, 125=>249, 256=>350, 1108=>557, 60=>186, 191=>305, 322=>383, 126=>250, 257=>351, 781=>460, 1109=>558, 61=>187, 192=>306, 323=>384, 127=>251, 258=>352, 782=>461, 1110=>559, 62=>188, 193=>307, 324=>385, 128=>252, 259=>353, 783=>462, 1111=>560, 63=>189, 194=>308, 325=>386, 129=>253, 260=>354, 784=>463, 1112=>561, 64=>190, 195=>309, 326=>387, 850=>484, 130=>254, 261=>355, 785=>464}
#h={}
#i=1
#(10..40).each do |x|
#h[i]=x;i+=1
#end
h.each{|key,value|

s_sql="select * from journals where journalized_id=#{key}"
i_sql='INSERT into journals (journalized_id,journalized_type,user_id,notes,created_on) VALUES (?,?,?,?,?)'

red_select_sql(s_sql){|row|
#debugger

red_exec_sql(i_sql,value,row[2],row[3],row[4],row[5])

}

}
end



def attachments

h={1113=>562, 196=>310, 327=>388, 131=>255, 262=>356, 786=>465, 1114=>563, 66=>191, 197=>311, 328=>389, 132=>256, 263=>357, 787=>466, 1115=>564, 198=>312, 460=>410, 67=>192, 133=>257, 264=>358, 788=>467, 1116=>565, 199=>313, 330=>390, 461=>411, 68=>193, 265=>359, 789=>468, 134=>258, 1117=>566, 200=>314, 331=>391, 462=>412, 986=>500, 69=>194, 266=>360, 659=>417, 790=>469, 135=>259, 1118=>567, 332=>392, 463=>413, 987=>501, 70=>195, 201=>315, 267=>361, 791=>470, 136=>260, 1119=>568, 464=>414, 988=>502, 71=>196, 202=>316, 792=>471, 137=>261, 268=>362, 1120=>569, 465=>415, 72=>197, 203=>317, 793=>472, 7=>140, 138=>262, 269=>363, 1121=>570, 466=>416, 73=>198, 204=>318, 794=>473, 8=>141, 139=>263, 270=>364, 1122=>571, 729=>418, 74=>199, 205=>319, 336=>393, 795=>474, 9=>142, 140=>264, 271=>365, 1123=>572, 730=>419, 75=>200, 206=>320, 337=>394, 796=>475, 1058=>510, 10=>143, 141=>265, 272=>366, 1124=>573, 731=>420, 76=>201, 207=>321, 797=>476, 11=>144, 142=>266, 273=>367, 1125=>574, 732=>421, 77=>202, 208=>322, 798=>477, 1060=>511, 12=>145, 143=>267, 1126=>575, 864=>485, 78=>203, 209=>323, 799=>478, 1061=>512, 13=>146, 144=>268, 275=>368, 1127=>576, 734=>422, 865=>486, 79=>204, 210=>324, 1062=>513, 14=>147, 145=>269, 276=>369, 1128=>577, 735=>423, 80=>205, 211=>325, 1063=>514, 15=>148, 146=>270, 277=>370, 1129=>578, 736=>424, 81=>206, 212=>326, 1064=>515, 16=>149, 147=>271, 278=>371, 1130=>579, 82=>207, 213=>327, 737=>425, 1065=>516, 17=>150, 148=>272, 83=>208, 214=>328, 738=>426, 1066=>517, 18=>151, 149=>273, 804=>479, 1001=>503, 84=>209, 215=>329, 739=>427, 936=>493, 19=>152, 150=>274, 805=>480, 85=>210, 216=>330, 740=>428, 1068=>518, 20=>153, 151=>275, 806=>481, 86=>211, 217=>331, 741=>429, 1069=>519, 21=>154, 152=>276, 87=>212, 218=>332, 742=>430, 1070=>520, 22=>155, 153=>277, 88=>213, 219=>333, 743=>431, 1005=>504, 1071=>521, 23=>156, 154=>278, 89=>214, 220=>334, 744=>432, 1006=>505, 24=>157, 155=>279, 1072=>522, 90=>215, 221=>335, 745=>433, 25=>158, 156=>280, 1073=>523, 222=>336, 746=>434, 26=>159, 157=>281, 1074=>524, 92=>216, 223=>337, 27=>160, 158=>282, 1075=>525, 93=>217, 748=>435, 28=>161, 159=>283, 1076=>526, 94=>218, 356=>395, 749=>436, 29=>162, 160=>284, 1077=>527, 95=>219, 750=>437, 30=>163, 161=>285, 1078=>528, 96=>220, 358=>396, 751=>438, 882=>487, 31=>164, 162=>286, 1079=>529, 97=>221, 359=>397, 883=>488, 32=>165, 163=>287, 1080=>530, 98=>222, 360=>398, 753=>439, 884=>489, 164=>288, 1081=>531, 33=>166, 99=>223, 361=>399, 754=>440, 165=>289, 34=>167, 755=>441, 100=>224, 166=>290, 1083=>532, 35=>168, 756=>442, 101=>225, 1084=>533, 36=>169, 167=>291, 364=>400, 757=>443, 102=>226, 1085=>534, 37=>170, 168=>292, 365=>401, 758=>444, 103=>227, 1086=>535, 38=>171, 169=>293, 366=>402, 759=>445, 104=>228, 1087=>536, 39=>172, 170=>294, 301=>372, 760=>446, 105=>229, 1088=>537, 40=>173, 302=>373, 761=>447, 106=>230, 368=>403, 827=>482, 1089=>538, 41=>174, 172=>295, 303=>374, 762=>448, 107=>231, 369=>404, 1090=>539, 42=>175, 173=>296, 1025=>506, 108=>232, 370=>405, 1091=>540, 109=>233, 1092=>541, 765=>449, 110=>234, 241=>338, 1093=>542, 766=>450, 1028=>507, 111=>235, 242=>339, 1094=>543, 767=>451, 1029=>508, 112=>236, 243=>340, 1095=>544, 768=>452, 113=>237, 244=>341, 1096=>545, 769=>453, 1031=>509, 114=>238, 245=>342, 376=>406, 1097=>546, 835=>483, 901=>490, 115=>239, 246=>343, 770=>454, 1098=>547, 50=>176, 116=>240, 247=>344, 378=>407, 771=>455, 1099=>548, 51=>177, 313=>375, 903=>491, 117=>241, 248=>345, 1100=>549, 52=>178, 183=>297, 118=>242, 249=>346, 773=>456, 904=>492, 1101=>550, 53=>179, 184=>298, 315=>376, 119=>243, 250=>347, 774=>457, 1102=>551, 54=>180, 185=>299, 316=>377, 971=>494, 120=>244, 251=>348, 775=>458, 1103=>552, 55=>181, 186=>300, 317=>378, 972=>495, 121=>245, 252=>349, 776=>459, 1104=>553, 56=>182, 187=>301, 318=>379, 973=>496, 122=>246, 384=>408, 1105=>554, 57=>183, 188=>302, 319=>380, 974=>497, 123=>247, 385=>409, 1106=>555, 58=>184, 189=>303, 320=>381, 975=>498, 124=>248, 1107=>556, 59=>185, 190=>304, 321=>382, 976=>499, 125=>249, 256=>350, 1108=>557, 60=>186, 191=>305, 322=>383, 126=>250, 257=>351, 781=>460, 1109=>558, 61=>187, 192=>306, 323=>384, 127=>251, 258=>352, 782=>461, 1110=>559, 62=>188, 193=>307, 324=>385, 128=>252, 259=>353, 783=>462, 1111=>560, 63=>189, 194=>308, 325=>386, 129=>253, 260=>354, 784=>463, 1112=>561, 64=>190, 195=>309, 326=>387, 850=>484, 130=>254, 261=>355, 785=>464}
#u = {3=>6,6=>28,14=>27} ##User Ip mapping

s_sql="select * from attachments"
i_sql='INSERT into attachments (container_id,container_type,filename,disk_filename,filesize,content_type,digest,downloads,author_id,created_on,description) VALUES (?,?,?,?,?,?,?,?,?,?,?)'

red_select_sql(s_sql){|row|
#debugger
red_exec_sql(i_sql,h[row[1]],row[2],row[3],row[4],row[5],row[6],row[7],row[8],row[9],row[10],row[11]) unless h[row[1]].nil?
}

end

def documents

s_sql="select * from documents where project_id=2"
i_sql='INSERT into documents (project_id,category_id,title,description,created_on) VALUES (?,?,?,?,?)'

red_select_sql(s_sql){|row|
red_exec_sql(i_sql,10,row[2],row[3],row[4],row[5])
}

end

def boards

s_sql="select * from boards where project_id=2"
i_sql='INSERT into boards (project_id,name,description,position,topics_count,messages_count,last_message_id,parent_id) VALUES (?,?,?,?,?,?,?,?)'
red_select_sql(s_sql){|row|
red_exec_sql(i_sql,10,row[2],row[3],row[4],row[5],row[6],row[7],row[8])
}
end


def move_issue_relation

s_sql="select * from issue_relations"
i_sql='INSERT into issue_relations (issue_from_id,issue_to_id,relation_type,delay) VALUES (?,?,?,?)'
red_select_sql(s_sql){|row| 
red_exec_sql(i_sql,h[row[1]],h[row[2]],row[3],row[4])
}
end

  def open_connection(info)
    self.log "opening #{info.inspect}"
    return Mysql::new(info.host, info.user, info.password, info.dbname)
  end

  def red_exec_sql(sql, *args)
    self.log("redmine: #{sql} args=#{args.join(',')}")
    statement = @ddb.prepare(sql)
    statement.execute(*args)
    statement.close()
  end

  def red_select_sql(sql, *args, &block)
    self.log("redmine: #{sql} args=#{args.join(',')}")
    statement = @sdb.prepare(sql)
    statement.execute(*args)
    while row = statement.fetch do
      yield row
    end
    statement.close()
  end

end
